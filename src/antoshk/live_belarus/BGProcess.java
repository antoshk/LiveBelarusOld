/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antoshk.live_belarus;

import antoshk.instagram.tag.TagCollector;
import antoshk.instagram.tag.TagProc;
import antoshk.instagram.tag.TagSetOld;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author User
 */
public class BGProcess extends java.awt.Frame {
    
    Timer mTimer;
    MyTimerTask mMyTimerTask;
    
    /**
     * Creates new form BGProcess
     */
    public BGProcess() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tagTextArea = new javax.swing.JTextArea();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        startStopToggleButton = new javax.swing.JToggleButton();
        timeField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jProgressBar2 = new javax.swing.JProgressBar();

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        setBounds(new java.awt.Rectangle(100, 100, 800, 400));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        mainTextArea.setEditable(false);
        mainTextArea.setColumns(60);
        mainTextArea.setRows(30);
        mainTextArea.setAutoscrolls(false);
        mainTextArea.setMinimumSize(new java.awt.Dimension(62, 62));
        jScrollPane1.setViewportView(mainTextArea);

        tagTextArea.setColumns(20);
        tagTextArea.setRows(5);
        tagTextArea.setBorder(null);
        jScrollPane2.setViewportView(tagTextArea);

        startStopToggleButton.setText("Старт");
        startStopToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopToggleButtonActionPerformed(evt);
            }
        });

        timeField.setColumns(5);
        timeField.setText("5");
        timeField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        timeField.setPreferredSize(new java.awt.Dimension(59, 20));
        timeField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeFieldMouseClicked(evt);
            }
        });

        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        jScrollPane4.setViewportView(outputTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(startStopToggleButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 742, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(167, 167, 167))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jProgressBar2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startStopToggleButton))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       mainTextArea.append(Utils.getTimeStamp() + " Старт приложения \n");
              

// TODO add your handling code here:
        //jTextArea1.append("Приве, как дела, нам надо набрать больше 20 мимволов и думаю нам это удалось");
    }//GEN-LAST:event_formWindowOpened

    private void startStopToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopToggleButtonActionPerformed
        
                // TODO add your handling code here:
        
        if (startStopToggleButton.isSelected()){
            startStopToggleButton.setText("Stop");
            mainTextArea.append(Utils.getTimeStamp() + " Таймер выполнения запущен \n");
            Calendar cal = Calendar.getInstance();
            cal.setTimeZone(TimeZone.getTimeZone("Europe/Minsk"));
            int hour = cal.get(Calendar.HOUR_OF_DAY);
            int min = cal.get(Calendar.MINUTE);
            int startHour, hourToWait, minToWait, timeToWait;
            
            try{
                startHour = Integer.parseInt(timeField.getText());
            } catch (Exception e){
                startHour = 1;
            }
            
            if (hour >= startHour) hourToWait = 24-hour+startHour-1;
            else hourToWait = startHour-hour-1;
            minToWait = 60-min;
            mainTextArea.append(Utils.getTimeStamp()+ " Выполнение начнётся через "+hourToWait+" часов " +minToWait+" минут\n");
            
            Options.appOptions.setHasWindowForm(true);
            Options.appOptions.setMainTextArea(mainTextArea);
            Options.appOptions.setProgressBar(jProgressBar2);
            Options.appOptions.setOutputTextArea(outputTextArea);
            Options.appOptions.setTagTextArea(tagTextArea);
            
            mTimer = new Timer();
            mMyTimerTask = new MyTimerTask();
            
            mMyTimerTask.textArea = mainTextArea;
            mMyTimerTask.tagArea = tagTextArea;
            
            timeToWait = 1000*60*minToWait + 1000*60*60*hourToWait;
            mTimer.schedule(mMyTimerTask, timeToWait, 1000*60*60*24);  
        }else{
            startStopToggleButton.setText("Start");
            mainTextArea.append(Utils.getTimeStamp()+" Таймер выполнения остановлен \n");
            mMyTimerTask.cancel();
            mTimer.cancel();
            mTimer.purge();
            Options.appOptions.setHasWindowForm(false);
        }
    }//GEN-LAST:event_startStopToggleButtonActionPerformed

    private void timeFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeFieldMouseClicked
        // TODO add your handling code here:
        timeField.selectAll();
    }//GEN-LAST:event_timeFieldMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BGProcess().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea mainTextArea;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JToggleButton startStopToggleButton;
    private javax.swing.JTextArea tagTextArea;
    private javax.swing.JTextField timeField;
    // End of variables declaration//GEN-END:variables
}

class MyTimerTask extends TimerTask {
        javax.swing.JTextArea textArea;
        javax.swing.JTextArea tagArea;
        @Override
        public void run() {
            textArea.append(Utils.getTimeStamp() + " Выполняю задание "+"\n");

            (new TagProc()).collectTagsInThreads(false);
            textArea.append(Utils.getTimeStamp() + " Сбор тэгов окончен "+"\n");
            TagProc.updateTagsCore();

            tagArea.setText("");
            TagProc.findTagTendentions();
            //TagSetOld tags = new TagSetOld();
            //tags.updateTagsCore();
            
            //textArea.append("Всего добавлено тэгов: "+tags.tagCount+"\nИз них новых: "+tags.newTagCount+"\n");
        }
}